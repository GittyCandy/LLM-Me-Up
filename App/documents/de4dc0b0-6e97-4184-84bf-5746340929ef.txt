University of Wollongong in Dubai CSIT242 - Mobile Application Development Introduction to the subject Dr. Haitham Yaish 2 Outline 3 � Introduction to Kotlin � Android Framework and Android Studio 4 Introduction to Kotlin Introduction What is Kotlin? Kotlin is a modern, trending programming language that was released in 2016 by JetBrains. Kotlin is easy to learn, especially if you already know Java (it is 100% compatible with Java). Which means that Java code (and libraries) can be used in Kotlin programs). Kotlin is used for: Mobile applications Web development Server side applications Data science And much, much more! 5 Introduction Why Use Kotlin? Kotlin is fully compatible with Java Kotlin works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.) Kotlin is concise and safe Kotlin is easy to learn, especially if you already know Java Kotlin is free to use Big community/support 6 Kotlin � Main Function To run a Kotlin program using the main function, you need to define a main entry point. This is similar to other programming languages like Java or C. The main function is the starting point of the Kotlin application. Simplified version: fun main() { println("Hello CSIT242"); } 7 Version with command-line argumetns: fun main(args: Array<String>) { println("Hello CSIT242"); } Output: Hello CSIT242 Kotlin � Comments Single-line Comments // e.g. // This is a comment Multi-line Comments /* �. */ e.g. /* The code below will print the words Hello World to the screen */ println("Hello World") 8 Kotlin � Variables Variables are containers for storing data values. To create a variable, use var or val, and assign a value to it with the equal sign (=) The difference between var and val is that variables declared with the var keyword can be changed/modified, while val variables cannot. 9 Kotlin � Data Types In Kotlin, the type of a variable is decided by its value: 10 Try the code Kotlin � Data Types It is possible to specify the type if you want: 11 Try the code Kotlin � Data Types Data types are divided into different groups: Numbers (Byte, Short, Int and Long) .. More Details Characters Booleans Strings Arrays 12 Kotlin � Data type Conversions 13 In some cases you may need to convert a data type for a variable to another data type such as changing an Integer to a short. The following is a list of functions in Kotlin used for type conversions: toByte() toShort() toInt() toLong() toFloat() toDouble() toChar() Kotlin � Variables - Arrays Arrays are used to store multiple values in a single variable, instead of creating separate variables for each value. To create an array, use the arrayOf() function, and place the values in a comma-separated list inside it. 14 Kotlin � Variables - Arrays Access the Elements of an Array You can access an array element by referring to the index number, inside square brackets. 15 Kotlin � Variables - Arrays Change an Array Element To change the value of a specific element, refer to the index number: 16 Try the code Kotlin � Variables - Arrays Array Length / Size To find out how many elements an array have, use the size property: 17 Try the code Kotlin � Variables - Strings Access a String To access the characters (elements) of a string, you must refer to the index number inside square brackets. 18 Try the code Kotlin � Variables 19 readLine() function allows the program user to enter string values or intercept keyboard input from the console as shown in following example: How Kotlin Programs Work? 20 21 Android Framework and Android Studio Android is an open source operating system, Linux-based software stack. This diagram shows the main components of the Android platform. Android Platform Architecture Linux Kernel The Linux kernel is the foundation of Android platform. It helps Android in core system services and maintaining functionalities such as threading, low-level memory management, security, process management, networking, and hardware drivers. The Linux Kernel also acts as an abstraction layer between the hardware and the software stack of the platform. Hardware Abstraction Layer (HAL) The Hardware Abstraction Layer (HAL) exposes hardware capabilities of devices to high level Kotlin API framework through standard interfaces. For each hardware component such as the camera or the Bluetooth, HAL has a library module that implements an interface for that component. Android Runtime (ART) Each application runs in its own process and with its own instance of Android runtime on devices. It was designed based on Java Virtual Machine and specifically for Android running in limited environment, where the limited battery, CPU, memory and data storage are the main concerns. It reads .dex files whereas JVM (Java Virtual Machine) reads .class files. Android Platform Architecture Native C/C++ Libraries Are used to build core Android system components and services like ART and HAL. The functionalities of these native libraries are exposed to apps by Java framework APIs provided by Android. They are used in drawing and manipulating 2D, 3D graphics, media framework processing, supporting fonts, data storage and web browsers. Java API Framework The entire feature-set of Android is accessible through APIs written in Java language. System Apps Android comes with many core pre-installed apps for emails, messaging, calendars, etc... These system apps can be invoked from your own apps. For example, if you want to provide the messaging functionality to an application, you do not need to build that functionality yourself. You can invoke the system app for messaging from within your app to send messages Android Platform Architecture Services A service is the invisible part of the application that runs in the background. Service doesn�t have any user interface of its own. Services are used to perform continuous processing in the background even when activities are not visible or active. Content Providers Content providers are used to manage and share application databases. They are the preferred way of sharing data between applications. You may also write your content provider to share your application�s data with other apps. For example, Android exposes some databases such as contacts and call logs using content providers. Activities Activity is the application�s user interface. Every screen in an application extends the activity class. The user interface for each activity is made up of several Views. Following are some of the components you will use often in any Android applications development. You will learn more about them with practical examples later in this subject. Components of Android Applications Broadcast Receivers Broadcast Receivers are used to receive messages broadcasted by Intents. When a broadcast receiver is added to your application for any specific Intent, then whenever that Intent occurs, your application will receive a message which has data from that Intent. Views Views are objects that are drawn on the screen. A view is the parent class of all activity user interface components. Each activity is made up of a set of views grouped together within a layout. Components of Android Applications Intents Intents are objects used to send messages across the whole Android system. They are used to broadcast messages, start an activity, or start a service, including an intention to have an action performed. It�s the system�s duty to interpret the message and determine the target(s) that will perform the actions required. Components of Android Applications Components of Android Applications Notifications Notifications are used to alert the user of an event without stealing the focus or interrupting the user�s ongoing interaction or activity. That's why they appear on the status bar at the top of the screen. They are popup style messages from other applications such as Instagram or Facebook. Examples of notifications can be notifications of received SMS, missed calls or notifications from any other application installed on the device. Android SDK platform Android SDK platform is a set of libraries and APIs that provide necessary classes, methods and interfaces to develop Android applications and allow you to compile your code. Integrated Development Environment (IDE) This is the official IDE for developing Android applications. You will use Android Studio throughout this course. Android SDK Tools: A software component that includes a complete set of development and debugging tools for Android SDK. Android SDK build tools: This is the software component that is required to build an Android application code after a developer finishes building the application. The built tools are continuously running during development to facilitate the testing process for the developer. Android Application Development In the first tutorial you will learn how to install Android Studio Android Application Development Kotlin Tutorial https://www.w3schools.com/KOTLIN/index.php . Last Accessed 31 December 2024. Android ATC Team. (2021). Android application development (12th ed.). Android ATC. Guo, L. (2022). The First Line of Code: Android Programming with Kotlin. Springer Nature. 31 References 32 THANK YOU
