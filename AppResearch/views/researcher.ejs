<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Research Agent | Standard & Quick Modes</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.lordicon.com/lordicon-1.1.0.css" rel="stylesheet">
    <style>
    :root {
        --primary-color: #f54266;
        --primary-light: #ff7b93;
        --primary-dark: #d11a42;
        --dark-color: #1a1a2e;
        --light-color: #f8f9fa;
        --gray-color: #6c757d;
        --success-color: #28a745;
        --error-color: #dc3545;
        --warning-color: #ffc107;
        --info-color: #17a2b8;
        --chat-bg: #ffffff;
        --user-bubble: #f54266;
        --ai-bubble: #f1f3f5;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --quick-accent: #b442f5;
        --quick-light: #c05df7;
        --quick-dark: #9335c8;
    }

    html {
        overflow-y: scroll;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    html::-webkit-scrollbar {
        display: none;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background-color: #f8f9fa;
        color: var(--dark-color);
        line-height: 1.6;
        min-height: 100vh;
    }

    .app-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background-color: var(--light-color);
    }

    .tab-content, .log-entries {
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(245, 66, 102, 0.3) transparent;
    }

    .tab-content::-webkit-scrollbar,
    .log-entries::-webkit-scrollbar {
        width: 6px;
    }

    .tab-content::-webkit-scrollbar-track,
    .log-entries::-webkit-scrollbar-track {
        background: transparent;
    }

    .tab-content::-webkit-scrollbar-thumb,
    .log-entries::-webkit-scrollbar-thumb {
        background-color: rgba(245, 66, 102, 0.3);
        border-radius: 3px;
    }

    .quick-mode .tab-content::-webkit-scrollbar-thumb,
    .quick-mode .log-entries::-webkit-scrollbar-thumb {
        background-color: rgba(123, 97, 255, 0.3);
    }

    .app-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        margin-bottom: 20px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .app-header h1 {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
        margin: 0;
    }

    .header-controls {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .mode-toggle {
        display: flex;
        background: rgba(245, 66, 102, 0.1);
        border-radius: 8px;
        padding: 4px;
    }

    .mode-btn {
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
        background: transparent;
        color: var(--dark-color);
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .mode-btn.active {
        background: var(--primary-color);
        color: white;
    }

    .mode-btn.quick.active {
        background: var(--quick-accent);
    }

    .research-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: var(--chat-bg);
        border-radius: 16px;
        box-shadow: var(--shadow);
        overflow: hidden;
        position: relative;
        padding: 20px;
        min-height: 0;
    }

    .workflow-steps {
        display: flex;
        justify-content: space-between;
        margin-bottom: 30px;
        position: relative;
        padding: 0 20px;
    }

    .step {
        text-align: center;
        flex: 1;
        position: relative;
        z-index: 1;
        font-size: 14px;
        font-weight: 500;
    }

    .step-number {
        width: 32px;
        height: 32px;
        background-color: rgba(245, 66, 102, 0.1);
        color: var(--primary-color);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-weight: bold;
        transition: all 0.3s;
    }

    .quick-mode .step-number {
        background-color: rgba(123, 97, 255, 0.1);
        color: var(--quick-accent);
    }

    .step.active .step-number {
        background-color: var(--primary-color);
        color: white;
        box-shadow: 0 0 0 3px rgba(245, 66, 102, 0.2);
    }

    .quick-mode .step.active .step-number {
        background-color: var(--quick-accent);
    }

    .step.completed .step-number {
        background-color: var(--success-color);
        color: white;
    }

    .step-line {
        position: absolute;
        top: 16px;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #eee;
        z-index: 0;
    }

    .active-line {
        position: absolute;
        top: 16px;
        left: 0;
        height: 2px;
        background-color: var(--primary-color);
        z-index: 1;
        transition: width 0.3s ease;
    }

    .quick-mode .active-line {
        background-color: var(--quick-accent);
    }

    .research-input {
        margin-bottom: 20px;
    }

    textarea {
        width: 100%;
        min-height: 120px;
        padding: 16px;
        border-radius: 12px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        font-family: inherit;
        font-size: 15px;
        margin-bottom: 15px;
        resize: vertical;
        line-height: 1.6;
        transition: all 0.3s;
    }

    textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(245, 66, 102, 0.2);
    }

    .research-controls {
        display: flex;
        gap: 12px;
    }

    .research-controls button {
        flex: 1;
        padding: 12px;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 14px;
    }

    .research-controls button:hover {
        background-color: var(--primary-dark);
    }

    .research-controls button:disabled {
        background-color: var(--gray-color);
        cursor: not-allowed;
        opacity: 0.7;
    }

    .quick-mode .research-controls button {
        background-color: var(--quick-accent);
    }

    .quick-mode .research-controls button:hover {
        background-color: #6a4df0;
    }

    .progress-container {
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 6px;
        margin: 15px 0;
        height: 6px;
    }

    .progress-bar {
        height: 6px;
        border-radius: 6px;
        background-color: var(--primary-color);
        width: 0%;
        transition: width 0.3s ease;
    }

    .quick-mode .progress-bar {
        background-color: var(--quick-accent);
    }

    .loading {
        display: none;
        text-align: center;
        margin: 20px 0;
        flex-direction: column;
        align-items: center;
        gap: 12px;
    }

    .loading-dots {
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: var(--primary-color);
        animation: bounce 1.4s infinite ease-in-out both;
    }

    .quick-mode .dot {
        background-color: var(--quick-accent);
    }

    .dot:nth-child(1) {
        animation-delay: -0.32s;
    }

    .dot:nth-child(2) {
        animation-delay: -0.16s;
    }

    @keyframes bounce {
        0%, 80%, 100% { transform: scale(0.5); opacity: 0.5; }
        40% { transform: scale(1); opacity: 1; }
    }

    #loadingMessage {
        font-size: 14px;
        color: var(--gray-color);
    }

    .output-container {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 20px;
        flex: 1;
        min-height: 0;
    }

    .output-area {
        background-color: var(--chat-bg);
        border-radius: 16px;
        padding: 16px;
        box-shadow: var(--shadow);
        display: flex;
        flex-direction: column;
        min-height: 0;
    }

    .tab-container {
        display: flex;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        margin-bottom: 16px;
    }

    .tab {
        padding: 8px 16px;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        transition: all 0.3s;
        font-size: 14px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--gray-color);
    }

    .tab.active {
        border-bottom: 2px solid var(--primary-color);
        color: var(--primary-color);
        font-weight: 600;
    }

    .quick-mode .tab.active {
        border-bottom-color: var(--quick-accent);
        color: var(--quick-accent);
    }

    .tab-content {
        display: none;
        flex: 1;
        overflow-y: auto;
        padding-right: 8px;
        max-height: 500px;
        min-height: 300px;
    }

    .tab-content.active {
        display: block;
    }

    .output-content {
        line-height: 1.7;
        font-size: 15px;
    }

    .output-content h3 {
        margin: 15px 0 10px;
        color: var(--primary-color);
    }

    .quick-mode .output-content h3 {
        color: var(--quick-accent);
    }

    .output-content p {
        margin-bottom: 12px;
    }

    .output-content ul, .output-content ol {
        margin: 10px 0 10px 20px;
    }

    .output-content code {
        background-color: rgba(0, 0, 0, 0.05);
        padding: 2px 4px;
        border-radius: 4px;
        font-family: monospace;
    }

    .output-content pre {
        background-color: rgba(0, 0, 0, 0.05);
        padding: 10px;
        border-radius: 6px;
        overflow-x: auto;
        margin: 10px 0;
    }

    .output-content blockquote {
        border-left: 3px solid var(--primary-color);
        padding-left: 10px;
        margin: 10px 0;
        color: var(--gray-color);
    }

    .quick-mode .output-content blockquote {
        border-left-color: var(--quick-accent);
    }

    .activity-log {
        background-color: var(--chat-bg);
        border-radius: 16px;
        padding: 16px;
        box-shadow: var(--shadow);
        display: flex;
        flex-direction: column;
        max-height: 500px;
        min-height: 300px;
    }
    .output-content, .log-entries {
        padding-bottom: 20px;
    }

    .log-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 16px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        padding-bottom: 12px;
    }

    .log-header h3 {
        font-size: 16px;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
    }

    .quick-mode .log-header h3 {
        color: var(--quick-accent);
    }

    .status-badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
        margin-left: auto;
    }

    .status-running {
        background-color: var(--primary-color);
        color: white;
    }

    .quick-mode .status-running {
        background-color: var(--quick-accent);
    }

    .status-completed {
        background-color: var(--success-color);
        color: white;
    }

    .status-error {
        background-color: var(--error-color);
        color: white;
    }

    .log-entries {
        flex: 1;
        overflow-y: auto;
        font-size: 14px;
        max-height: 500px;
        min-height: 300px;
    }

    .log-entry {
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .log-entry:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }

    .log-time {
        font-size: 12px;
        color: var(--gray-color);
        margin-bottom: 4px;
    }

    .log-message {
        display: flex;
        align-items: flex-start;
        gap: 8px;
    }

    .log-icon {
        color: var(--primary-color);
        margin-top: 2px;
        flex-shrink: 0;
    }

    .quick-mode .log-icon {
        color: var(--quick-accent);
    }

    .reference-item {
        background-color: rgba(245, 66, 102, 0.05);
        border-left: 3px solid var(--primary-color);
        padding: 12px;
        margin-bottom: 12px;
        border-radius: 0 8px 8px 0;
    }

    .quick-mode .reference-item {
        border-left-color: var(--quick-accent);
        background-color: rgba(123, 97, 255, 0.05);
    }

    .reference-title {
        font-weight: 600;
        margin-bottom: 6px;
    }

    .reference-url {
        color: var(--primary-color);
        font-size: 13px;
        word-break: break-all;
    }

    .quick-mode .reference-url {
        color: var(--quick-accent);
    }

    .quick-point {
        background: rgba(123, 97, 255, 0.05);
        border-left: 3px solid var(--quick-accent);
        padding: 12px;
        margin: 12px 0;
        border-radius: 0 8px 8px 0;
    }

    .quick-tldr {
        background: rgba(123, 97, 255, 0.08);
        padding: 12px;
        border-radius: 8px;
        margin: 15px 0;
        font-weight: 500;
    }

    .search-result {
        margin-bottom: 15px;
        padding: 15px;
        border-radius: 8px;
        background-color: rgba(0, 0, 0, 0.02);
        border-left: 3px solid var(--primary-color);
    }

    .quick-mode .search-result {
        border-left-color: var(--quick-accent);
    }

    .search-result-title {
        font-weight: 600;
        margin-bottom: 5px;
    }

    .search-result-snippet {
        color: var(--gray-color);
        font-size: 14px;
        margin-bottom: 5px;
    }

    .search-result-url {
        font-size: 12px;
        color: var(--primary-color);
        word-break: break-all;
    }

    .quick-mode .search-result-url {
        color: var(--quick-accent);
    }

    .websearch-toggle {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-left: 15px;
    }

    .toggle-label {
        font-size: 14px;
        font-weight: 500;
        color: var(--gray-color);
        transition: color 0.3s;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 24px;
    }

    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .toggle-slider {
        background-color: var(--primary-color);
    }

    .quick-mode input:checked + .toggle-slider {
        background-color: var(--quick-accent);
    }

    input:checked + .toggle-slider:before {
        transform: translateX(26px);
    }

    input:checked ~ .toggle-label {
        color: var(--primary-color);
    }

    .quick-mode input:checked ~ .toggle-label {
        color: var(--quick-accent);
    }

    .search-disabled-note {
        background-color: rgba(245, 66, 102, 0.1);
        padding: 12px;
        border-radius: 8px;
        margin: 10px 0;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .quick-mode .search-disabled-note {
        background-color: rgba(123, 97, 255, 0.1);
    }

    .search-disabled-note i {
        color: var(--primary-color);
    }

    .quick-mode .search-disabled-note i {
        color: var(--quick-accent);
    }

    @media (max-width: 768px) {
        .output-container {
            grid-template-columns: 1fr;
        }

        .workflow-steps {
            flex-wrap: wrap;
            gap: 15px;
            padding: 0;
        }

        .step {
            flex: 0 0 calc(33.333% - 10px);
            font-size: 12px;
        }

        .step-line, .active-line {
            display: none;
        }

        .research-controls {
            flex-wrap: wrap;
        }

        .research-controls button {
            flex: 0 0 calc(50% - 6px);
        }

        .app-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .header-controls {
            width: 100%;
            flex-wrap: wrap;
            gap: 10px;
        }

        .mode-toggle {
            width: 100%;
        }

        .mode-btn {
            flex: 1;
            justify-content: center;
        }

        .websearch-toggle {
            margin-left: 0;
            width: 100%;
            justify-content: flex-end;
        }
    }

    .mode-btn lord-icon {
        transition: all 0.3s;
    }

    .mode-btn.active lord-icon {
        filter: brightness(0) invert(1);
    }

    .mode-btn:active {
        transform: translateY(0);
    }
    </style>
</head>
<body>
    <div class="app-container">
        <header class="app-header">
           <div class="header-content">
                <lord-icon
                    src="https://cdn.lordicon.com/aichnomm.json"
                    trigger="loop"
                    delay="1000"
                    stroke="bold"
                    state="hover-scary"
                    colors="primary:#f54266,secondary:#f54266"
                    style="width:50px;height:50px">
                </lord-icon>
                <h1>Advanced Research Agent</h1>
            </div>
            <div class="header-controls">
                <div class="mode-toggle">
                    <button class="mode-btn active" id="standardModeBtn" onclick="setMode('standard')">
                        <lord-icon
                            src="https://cdn.lordicon.com/qlpudrww.json"
                            trigger="hover"
                            colors="primary:#f54266"
                            style="width:30px;height:30px">
                        </lord-icon>
                        Standard Search
                    </button>
                    <button class="mode-btn" id="quickModeBtn" onclick="setMode('quick')">
                        <lord-icon
                            src="https://cdn.lordicon.com/qpmdtzim.json"
                            trigger="hover"
                            colors="primary:#f54266"
                            style="width:30px;height:30px">
                        </lord-icon>
                        GenZ Mode
                    </button>
                </div>
                <div class="websearch-toggle">
                    <label class="toggle-switch">
                        <input type="checkbox" id="webSearchToggle" checked>
                        <span class="toggle-slider"></span>
                    </label>
                    <span class="toggle-label">Web Search</span>
                </div>
            </div>
        </header>

        <div class="research-container">
            <div class="workflow-steps" id="workflowSteps">
                <div class="step-line"></div>
                <div class="active-line" id="activeLine"></div>

                <div class="step" id="step1">
                    <div class="step-number">1</div>
                    <div>Initial Research</div>
                </div>

                <div class="step" id="step2">
                    <div class="step-number">2</div>
                    <div>Search Queries</div>
                </div>

                <div class="step" id="step3">
                    <div class="step-number">3</div>
                    <div>Web Research</div>
                </div>

                <div class="step" id="step4">
                    <div class="step-number">4</div>
                    <div>Analysis</div>
                </div>

                <div class="step" id="step5">
                    <div class="step-number">5</div>
                    <div>Final Report</div>
                </div>
            </div>

            <div class="research-area">
                <div class="research-input">
                    <textarea id="researchPrompt" placeholder="Enter your research topic or question here..." rows="3"></textarea>
                    <div class="research-controls">
                        <button id="startResearch" onclick="startFullResearch()">
                            <lord-icon
                                src="https://cdn.lordicon.com/lrubprlz.json"
                                trigger="hover"
                                colors="primary:#ffffff"
                                style="width:30px;height:30px">
                            </lord-icon>
                            Start Research
                        </button>
                        <button id="stopResearch" onclick="stopResearch()" disabled>
                            <lord-icon
                                src="https://cdn.lordicon.com/kfzfxczd.json"
                                trigger="hover"
                                colors="primary:#ffffff"
                                style="width:30px;height:30px">
                            </lord-icon>
                            Stop
                        </button>
                        <button id="exportResearch" onclick="exportResearch()">
                            <lord-icon
                                src="https://cdn.lordicon.com/bimokqfw.json"
                                trigger="hover"
                                colors="primary:#ffffff"
                                style="width:30px;height:30px">
                            </lord-icon>
                            Export
                        </button>
                        <button id="quickReadBtn" onclick="quickReadCurrent()">
                            <lord-icon
                                src="https://cdn.lordicon.com/vwwysvjs.json"
                                trigger="hover"
                                colors="primary:#ffffff"
                                style="width:30px;height:30px">
                            </lord-icon>
                            QuickRead
                        </button>
                    </div>
                </div>

                <div class="progress-container">
                    <div class="progress-bar" id="researchProgress"></div>
                </div>

                <div class="loading" id="loading">
                    <div class="loading-dots">
                        <div class="dot"></div>
                        <div class="dot"></div>
                        <div class="dot"></div>
                    </div>
                    <p id="loadingMessage">Initializing research process...</p>
                </div>

                <div class="output-container">
                    <div class="output-area" id="outputArea">
                        <div class="tab-container">
                            <div class="tab active" onclick="switchTab('research')">
                                <lord-icon
                                    src="https://cdn.lordicon.com/iiixgoqp.json"
                                    trigger="hover"
                                    colors="primary:#f54266"
                                    style="width:30px;height:30px">
                                </lord-icon>
                                Research
                            </div>
                            <div class="tab" onclick="switchTab('references')">
                                <lord-icon
                                    src="https://cdn.lordicon.com/abgykmtd.json"
                                    trigger="hover"
                                    colors="primary:#f54266"
                                    style="width:30px;height:30px">
                                </lord-icon>
                                References
                            </div>
                            <div class="tab" onclick="switchTab('reflections')">
                                <lord-icon
                                    src="https://cdn.lordicon.com/valwmkhs.json"
                                    trigger="hover"
                                    colors="primary:#f54266"
                                    style="width:30px;height:30px">
                                </lord-icon>
                                Reflections
                            </div>
                        </div>

                        <div class="tab-content active" id="research-tab">
                            <div class="output-content" id="researchOutput"></div>
                        </div>

                        <div class="tab-content" id="references-tab">
                            <div class="output-content" id="referencesOutput"></div>
                        </div>

                        <div class="tab-content" id="reflections-tab">
                            <div class="output-content" id="reflectionsOutput"></div>
                        </div>
                    </div>

                    <div class="activity-log">
                        <div class="log-header">
                            <lord-icon
                                src="https://cdn.lordicon.com/yraqammt.json"
                                trigger="hover"
                                colors="primary:#f54266"
                                style="width:30px;height:30px">
                            </lord-icon>
                            <h3>Activity Log</h3>
                            <span class="status-badge status-running" id="statusBadge">IDLE</span>
                        </div>
                        <div class="log-entries" id="activityLog"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.lordicon.com/lordicon-1.1.0.js"></script>
    <script>
        let currentStep = 0;
        let isResearchRunning = false;
        let currentMode = 'standard';
        let researchData = {
            initialResearch: '',
            searchQueries: [],
            webResults: [],
            analysis: '',
            finalReport: '',
            references: [],
            reflections: []
        };

        // Initialize the UI
        updateWorkflowProgress();
        updateStatus('IDLE');

        function setMode(mode) {
            currentMode = mode;
            document.getElementById('standardModeBtn').classList.toggle('active', mode === 'standard');
            document.getElementById('quickModeBtn').classList.toggle('active', mode === 'quick');
            document.body.classList.toggle('quick-mode', mode === 'quick');

            const buttons = document.querySelectorAll('button:not(.mode-btn)');
            buttons.forEach(btn => {
                if (mode === 'quick') {
                    btn.classList.add('quick-mode');
                } else {
                    btn.classList.remove('quick-mode');
                }
            });

            logActivity(`Switched to ${mode === 'quick' ? 'QuickRead' : 'Standard'} mode`);
        }

        function updateWorkflowProgress() {
            document.querySelectorAll('.step').forEach((step, index) => {
                step.classList.remove('active', 'completed');
                if (index < currentStep) {
                    step.classList.add('completed');
                } else if (index === currentStep) {
                    step.classList.add('active');
                }
            });

            const progressPercentage = (currentStep / 5) * 100;
            document.getElementById('activeLine').style.width = `${progressPercentage}%`;
            document.getElementById('researchProgress').style.width = `${progressPercentage}%`;
        }

        function updateStatus(status) {
            const badge = document.getElementById('statusBadge');
            badge.textContent = status;

            badge.classList.remove('status-running', 'status-completed', 'status-error');

            if (status === 'RUNNING') {
                badge.classList.add('status-running');
            } else if (status === 'COMPLETED') {
                badge.classList.add('status-completed');
            } else if (status === 'ERROR') {
                badge.classList.add('status-error');
            }
        }

        function logActivity(message) {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry';

            logEntry.innerHTML = `
                <div class="log-time">${timeString}</div>
                <div class="log-message">
                    <i class="fas fa-info-circle log-icon"></i>
                    <div>${message}</div>
                </div>
            `;

            document.getElementById('activityLog').prepend(logEntry);
        }

        function showLoading(show, message = '') {
            const loadingElement = document.getElementById('loading');
            loadingElement.style.display = show ? 'flex' : 'none';

            if (message) {
                document.getElementById('loadingMessage').textContent = message;
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
                if (tab.textContent.toLowerCase().includes(tabName.toLowerCase())) {
                    tab.classList.add('active');
                }
            });

            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
                if (content.id.includes(tabName)) {
                    content.classList.add('active');
                }
            });
        }

        function formatReferences(references) {
            if (!references || references.length === 0) {
                return '<p>No references collected yet.</p>';
            }

            if (currentMode === 'quick') {
                return references.map(ref => `
                    <div class="reference-item">
                        <div class="reference-title">📚 ${ref.title || 'Untitled Source'}</div>
                        <div class="reference-url">🔗 ${ref.url || 'No URL available'}</div>
                        ${ref.summary ? `<div class="quick-tldr">${ref.summary}</div>` : ''}
                    </div>
                `).join('');
            } else {
                return references.map(ref => `
                    <div class="reference-item">
                        <div class="reference-title">${ref.title || 'Untitled Source'}</div>
                        <div class="reference-url">${ref.url || 'No URL available'}</div>
                        ${ref.summary ? `<p>${ref.summary}</p>` : ''}
                    </div>
                `).join('');
            }
        }

        function formatReflections(reflections) {
            if (!reflections || reflections.length === 0) {
                return '<p>No reflections generated yet.</p>';
            }

            if (currentMode === 'quick') {
                return reflections.map((reflection, index) => `
                    <div class="quick-point">
                        <strong>💭 Reflection ${index + 1}:</strong> ${reflection}
                    </div>
                `).join('');
            } else {
                return reflections.map((reflection, index) => `
                    <div class="section">
                        <h4 class="section-title">Reflection ${index + 1}</h4>
                        <p>${reflection}</p>
                    </div>
                `).join('');
            }
        }

        function formatResearchContent(content) {
    if (!content) return '<p>Research in progress...</p>';

    let html = '';

    if (researchData.finalReportNote) {
        html += `<div class="search-disabled-note">${researchData.finalReportNote}</div>`;
    }

    if (currentMode === 'quick') {
        html += `
            <div class="quick-content">
                ${content.replace(/\n/g, '<br>')}
            </div>
        `;
    } else {
        html += `
            <div class="section">
                ${content.replace(/\n/g, '<br>')}
            </div>
        `;
    }

    return html;
}

        function updateOutputDisplay() {
            document.getElementById('researchOutput').innerHTML = formatResearchContent(
                researchData.finalReport || researchData.analysis || researchData.initialResearch
            );

            document.getElementById('referencesOutput').innerHTML = formatReferences(researchData.references);

            document.getElementById('reflectionsOutput').innerHTML = formatReflections(researchData.reflections);
        }

        async function quickReadCurrent() {
            const currentContent =
                researchData.finalReport ||
                researchData.analysis ||
                researchData.initialResearch ||
                document.getElementById('researchPrompt').value;

            if (!currentContent) {
                alert('No content available to summarize');
                return;
            }

            showLoading(true, 'Creating QuickRead summary...');
            logActivity('Generating QuickRead version of current content');

            try {
                const quickVersion = await callResearchAgent(currentContent, 'quickread', 'quick');

                if (researchData.finalReport) {
                    researchData.finalReport = quickVersion;
                } else if (researchData.analysis) {
                    researchData.analysis = quickVersion;
                } else if (researchData.initialResearch) {
                    researchData.initialResearch = quickVersion;
                }

                updateOutputDisplay();
                logActivity('QuickRead summary generated');
            } catch (error) {
                console.error('QuickRead error:', error);
                logActivity(`QuickRead failed: ${error.message}`);
            } finally {
                showLoading(false);
            }
        }

        async function performWebSearch(query) {
            try {
                logActivity(`Performing web search for: "${query}"`);

                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        query: query,
                        mode: currentMode
                    }),
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return data.results;
            } catch (error) {
                console.error('Search error:', error);
                logActivity(`Search failed for "${query}": ${error.message}`);
                return [];
            }
        }

        function formatSearchResults(results, mode) {
            if (mode === 'quick') {
                return results.slice(0, 3).map(result => `
                    <div class="search-result">
                        <div class="search-result-title">🔍 ${result.title || 'No title'}</div>
                        <div class="search-result-snippet">${result.snippet || 'No description available'}</div>
                        <div class="search-result-url">🔗 ${result.link || 'No URL available'}</div>
                    </div>
                `).join('');
            } else {
                return results.slice(0, 5).map(result => `
                    <div class="search-result">
                        <div class="search-result-title">${result.title || 'No title'}</div>
                        <div class="search-result-snippet">${result.snippet || 'No description available'}</div>
                        <div class="search-result-url">${result.link || 'No URL available'}</div>
                    </div>
                `).join('');
            }
        }

        async function processSearchResults(query, results) {
            if (results.length === 0) {
                logActivity(`No results found for: "${query}"`);
                return {
                    title: `Search: ${query}`,
                    content: `No relevant results found for "${query}"`,
                    summary: `No results for "${query}"`
                };
            }

            const resultsContent = results.map(r =>
                `Title: ${r.title}\nURL: ${r.link}\nContent: ${r.snippet}`
            ).join('\n\n');

            try {
                const analysis = await callResearchAgent(
                    `Search query: ${query}\n\nResults:\n${resultsContent}`,
                    'web',
                    currentMode
                );

                return {
                    title: results[0].title || `Results for: ${query}`,
                    content: analysis,
                    summary: analysis.split('\n').slice(0, 3).join('\n'),
                    url: results[0].link
                };
            } catch (error) {
                console.error('Result processing error:', error);
                return {
                    title: `Search: ${query}`,
                    content: `Error processing results for "${query}"`,
                    summary: `Error processing "${query}"`
                };
            }
        }

        async function startFullResearch() {
            const prompt = document.getElementById('researchPrompt').value;
            if (!prompt) {
                alert('Please enter a research topic first');
                return;
            }

            // Reset research data
            researchData = {
                initialResearch: '',
                searchQueries: [],
                webResults: [],
                analysis: '',
                finalReport: '',
                references: [],
                reflections: [],
                webSearchUsed: webSearchEnabled
            };

            isResearchRunning = true;
            document.getElementById('startResearch').disabled = true;
            document.getElementById('stopResearch').disabled = false;
            updateStatus('RUNNING');
            logActivity(`Starting ${currentMode === 'quick' ? 'QuickRead' : 'standard'} research process...`);
            logActivity(`Web search: ${webSearchEnabled ? 'ENABLED' : 'DISABLED'}`);

            try {
                // Step 1: Initial Research
                currentStep = 1;
                updateWorkflowProgress();
                showLoading(true, currentMode === 'quick' ? 'Generating quick overview...' : 'Generating initial research...');
                logActivity(currentMode === 'quick' ? 'Creating quick overview' : 'Generating initial research content');

                const initialResearch = await callResearchAgent(prompt, 'generate', currentMode);
                researchData.initialResearch = initialResearch;
                logActivity(currentMode === 'quick' ? 'Quick overview generated' : 'Initial research generated');
                updateOutputDisplay();

                if (webSearchEnabled) {
                    // Step 2: Search Queries (only if web search is enabled)
                    currentStep = 2;
                    updateWorkflowProgress();
                    showLoading(true, 'Generating search queries...');
                    logActivity('Creating search queries');

                    const searchQueries = await callResearchAgent(prompt, 'search', currentMode);
                    researchData.searchQueries = extractSearchQueries(searchQueries);
                    logActivity(`Generated ${researchData.searchQueries.length} search queries`);

                    // Step 3: Web Research (using SerpAPI)
                    currentStep = 3;
                    updateWorkflowProgress();
                    showLoading(true, currentMode === 'quick' ? 'Finding quick answers...' : 'Conducting web research...');
                    logActivity('Starting web research phase');

                    // Process each search query
                    for (let i = 0; i < Math.min(researchData.searchQueries.length, currentMode === 'quick' ? 3 : 5); i++) {
                        if (!isResearchRunning) break;

                        const query = researchData.searchQueries[i];
                        logActivity(`Researching: "${query}"`);

                        // Perform actual web search
                        const searchResults = await performWebSearch(query);

                        // Process and analyze the results
                        const processedResult = await processSearchResults(query, searchResults);

                        researchData.webResults.push(processedResult);
                        researchData.references.push({
                            title: processedResult.title,
                            url: processedResult.url || `https://www.google.com/search?q=${encodeURIComponent(query)}`,
                            summary: processedResult.summary
                        });

                        updateOutputDisplay();
                    }
                } else {
                    // Alternative Step 2-3: Local Knowledge Expansion
                    currentStep = 2;
                    updateWorkflowProgress();
                    showLoading(true, 'Expanding local knowledge...');
                    logActivity('Performing local knowledge expansion');

                    const localResearch = await fetch('/api/local-research', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            prompt: `${prompt}\n\nCurrent Research:\n${researchData.initialResearch}`,
                            mode: currentMode
                        }),
                    });

                    if (!localResearch.ok) {
                        throw new Error('Local research failed');
                    }

                    const localData = await localResearch.json();
                    researchData.localKnowledge = localData.response;
                    logActivity('Local knowledge expansion completed');

                    // Skip to step 4
                    currentStep = 4;
                    updateWorkflowProgress();
                }

                if (!isResearchRunning) {
                    logActivity('Research stopped by user');
                    throw new Error('Research stopped by user');
                }

                // Step 4: Analysis
                currentStep = 4;
                updateWorkflowProgress();
                showLoading(true, currentMode === 'quick' ? 'Analyzing key points...' : 'Analyzing findings...');
                logActivity('Analyzing research findings');

                let analysisContent;
                if (webSearchEnabled) {
                    analysisContent = researchData.webResults.map(r => r.content).join('\n\n');
                } else {
                    analysisContent = `${researchData.initialResearch}\n\n${researchData.localKnowledge || ''}`;
                }

                const analysis = await callResearchAgent(analysisContent, 'analyze', currentMode);
                researchData.analysis = analysis;

                // Generate reflections
                const reflections = await callResearchAgent(analysis, 'reflect', currentMode);
                researchData.reflections = extractReflections(reflections, currentMode);
                logActivity('Analysis and reflections completed');
                updateOutputDisplay();

                // Step 5: Final Report
                currentStep = 5;
                updateWorkflowProgress();
                showLoading(true, currentMode === 'quick' ? 'Creating TL;DR report...' : 'Generating final report...');
                logActivity('Compiling final report');

                let reportContent;
                if (webSearchEnabled) {
                    reportContent = `${researchData.initialResearch}\n\n## Research Findings\n\n${analysis}`;
                } else {
                    reportContent = `${researchData.initialResearch}\n\n## Local Knowledge Synthesis\n\n${analysis}`;
                    researchData.finalReportNote = "Note: This report was generated without web searches to reduce API costs.";
                }

                const finalReport = await callResearchAgent(reportContent, 'report', currentMode);
                researchData.finalReport = finalReport;
                logActivity('Final report generated');
                updateOutputDisplay();

                // Research complete
                updateStatus('COMPLETED');
                logActivity('Research process completed successfully');
            } catch (error) {
                console.error('Research error:', error);
                updateStatus('ERROR');
                logActivity(`Error: ${error.message}`);
            } finally {
                showLoading(false);
                isResearchRunning = false;
                document.getElementById('startResearch').disabled = false;
                document.getElementById('stopResearch').disabled = true;
            }
        }


        function stopResearch() {
            isResearchRunning = false;
            logActivity('User requested research stop');
        }

        function exportResearch() {
            const blob = new Blob([JSON.stringify(researchData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `research-report-${new Date().toISOString().slice(0, 10)}.json`;
            a.click();

            URL.revokeObjectURL(url);
            logActivity('Exported research report');
        }

        async function callResearchAgent(prompt, agentType, mode = 'standard') {
            try {
                const response = await fetch('/api/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        prompt: prompt,
                        agent_type: agentType,
                        mode: mode
                    }),
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return data.response;
            } catch (error) {
                console.error('Agent error:', error);
                throw error;
            }
        }

        function extractSearchQueries(text) {
            const queries = text.split('\n')
                .map(line => line.replace(/^\d+\.\s*/, '').trim())
                .filter(line => line.length > 0);

            return queries.slice(0, currentMode === 'quick' ? 3 : 5);
        }

        function extractReflections(text, mode) {
            if (mode === 'quick') {
                return text.split('\n')
                    .filter(line => line.trim().length > 0 && line.match(/[🤔🧐💭]/))
                    .map(line => line.trim());
            } else {
                return text.split('\n\n')
                    .filter(para => para.trim().length > 0)
                    .map(para => para.replace(/^\d+\.\s*/, '').trim());
            }
        }

    let webSearchEnabled = true;

document.getElementById('webSearchToggle').addEventListener('change', function() {
    webSearchEnabled = this.checked;
    logActivity(`Web search ${webSearchEnabled ? 'enabled' : 'disabled'}`);

    if (!webSearchEnabled) {
        const note = document.createElement('div');
        note.className = 'search-disabled-note';
        note.innerHTML = `
            <i class="fas fa-info-circle"></i>
            Web search is disabled. Research will use existing knowledge only.
        `;
        document.getElementById('researchOutput').prepend(note);
    }
});
    </script>
</body>
</html>